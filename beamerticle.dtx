% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
# beamerticle: Convenient mode selection in Beamer documents

This class is a wrapper around the `beamer` class to make it easier to use the
same document to generate the different forms of the presentation: the slides
themselves, an abbreviated slide set for transparencies or online reference,
an n-up handout version, but most significantly a transcript or set of notes
using the `article` class.

## Installation

### Dependencies

TBC

### Automated way

A makefile is provided which you can use with the Make utility:

  * Running `make` generates the derived files
  * Running `make inst` installs the files in the user's TeX tree.
  * Running `make install` installs the files in the local TeX tree.

## Licence

This work consists of the file beamerticle.dtx and a Makefile.

This work may be distributed and/or modified under the conditions of the
[LaTeX Project Public License (LPPL)](http://www.latex-project.org/lppl.txt),
either version 1.3c of this license or (at your option) any later version.

This work is "maintained" (as per LPPL maintenance status) by
[Alex Ball](http://alexball.me.uk/).

%</readme>
%<*example>
\PassOptionsToClass{a4paper,12pt}{article}
\PassOptionsToClass{14pt}{beamer}
\documentclass[also={trans,handout,article},nup=3]{beamerticle}
\usepackage[british]{babel}
\mode<article>{
  \usepackage[hmargin=3cm,vmargin=2.5cm]{geometry}
}
\mode<presentation>{
  \usefonttheme{professionalfonts}
}
\mode<handout>{
  \usecolortheme{dove}
}
\usepackage{libertine}

\title{A demonstration of the \textsf{beamerticle} class}
\subtitle{Testing features}
\author{Alex Ball}
\institute{University of Life}
\date{1 September 2016}
\subject{A LaTeX package}
\keywords{CTAN, literate programming}

\begin{document}
  \begin{frame}
    \maketitle
  \end{frame}
  
  This very brief demonstration shows how to use the \textsf{beamerticle} class.
  It allows easy switching between four \textsf{beamer} modes:
  
  \begin{frame}{Beamer modes}
    \begin{itemize}[<+->]
      \item \textbf{beamer:} regular slides
      \item \textbf{trans:} slides suitable for printing on transparencies
      \item \textbf{handout:} slides suitable for printing on paper
      \item \textbf{article:} transcript, paper, notes or other article-style
        document based on the slides
    \end{itemize}
  \end{frame}
  
  Notice how the text outside frames is only shown in article mode. Also,
  
  \begin{frame}{Features shown in this example}
    \begin{itemize}[<+->]
      \item Different class options are passed to the \textsf{beamer} and
        \textsf{article} classes.
      \item The `trans' and `handout' versions do not have the intermediate
        slides used by the `beamer' version for uncovering content.
      \item The handout has three slides to a page with room for handwritten
        notes at the side, and is in black and white.
    \end{itemize}
    
    \uncover<+->{See the source code of this example to see how it was done.}
  \end{frame}
  
  This PDF also has title and author information saved in the metadata (look
  at the properties in your PDF viewer).
  
  Happy {\LaTeX}ing!
\end{document}
%</example>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
beamerticle --- Convenient mode selection in Beamer documents
Author:  Alex Ball
E-mail:  a.ball@ukoln.ac.uk
License: Released under the LaTeX Project Public License v1.3c or later
See:     http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2015 by Alex Ball <a.ball@ukoln.ac.uk>
\endpostamble

\usedir{tex/latex/\jobname}
\generate{
  \file{\jobname.cls}{\from{\jobname.dtx}{class}}
}
\usedir{doc/latex/\jobname}
\generate{
  \file{\jobname-example.tex}{\from{\jobname.dtx}{example}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/\jobname}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/\jobname}
\generate{
  \file{README.md}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>
\ProvidesFile{beamerticle.dtx}
%</driver>
%<class>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<class>\ProvidesClass{beamerticle}
%<*class>
    [2016/07/12 v0.1 Convenient mode selection in Beamer documents ]
%</class>
%<*driver>
\documentclass[12pt]{article}
% Page Layout
\usepackage[a4paper,hmargin=30mm,vmargin=25mm,nohead]{geometry}
% Typography
\RequirePackage[charter,expert]{mathdesign}
\makeatletter
\def\hrulefill{\leavevmode\leaders \hrule height \rulethickness \hfill\kern\z@}
\makeatother
\RequirePackage{iftex}
\ifPDFTeX
  \RequirePackage[utf8]{inputenc}
  \RequirePackage[T1]{fontenc}
  \RequirePackage[scaled=0.96,sups]{XCharter}
  \RequirePackage[scaled=0.95,tabular]{sourcesanspro}
  \RequirePackage[varl,varqu]{zi4}
\else
  \RequirePackage{fontspec}
  \setmainfont
    [Scale=0.96
    ,Ligatures=TeX
    ]%
    {Charis SIL}
  \setsansfont
    [Scale=MatchLowercase
    ,Ligatures=TeX
    ,StylisticSet=4
    ,BoldFont={Source Sans Pro Bold}
    ,ItalicFont={Source Sans Pro Italic}
    ,BoldItalicFont={Source Sans Pro Bold Italic}
    ]%
    {Source Sans Pro}
  \setmonofont
    [Scale=MatchLowercase
    ,RawFeature={extend=0.83}
    ,BoldFont={Source Code Pro Bold}
    ,BoldItalicFont={Source Code Pro Bold}
    ,AutoFakeSlant=0.2
    ,ItalicFeatures={StylisticSet=2,StylisticSet=3}
    ,BoldItalicFeatures={FakeSlant=0.2,StylisticSet=2,StylisticSet=3}
    ]%
    {Source Code Pro}
\fi
% Improving the look of the documentation
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
\usepackage{enumitem}
\setlist[itemize]{%
  topsep={6pt plus 2pt minus 1pt},%
  partopsep={0pt plus 0.05em},%
  itemsep={0.2em plus 0.05em minus 0.05em},%
  parsep={0pt plus 0.05em},%
}
\usepackage[bookmarks,raiselinks,pageanchor,hyperindex,colorlinks]{hyperref}
\usepackage{etoolbox}
\usepackage{tcolorbox,doc}
\makeatletter
\renewenvironment{theglossary}{%
  \bgroup
    \glossary@prologue
    \GlossaryParms \let\item\@idxitem \ignorespaces
}{%
  \egroup
}
\makeatother
\tcbuselibrary{documentation,breakable,minted}
\colorlet{Option}{violet}
\colorlet{Command}{red!75!black}
\colorlet{Environment}{blue!75!black}
\colorlet{Value}{olive!75!black}
\colorlet{Color}{cyan!75!black}
\tcbset
  { listing engine=minted
  , minted options=
    { breaklines
    , fontsize=\footnotesize
    , linenos
    , numbersep=20pt
    , firstnumber=last
    }
  , index format=pgf
  , color command=Command
  , color environment=Environment
  , color key=Option
  , color value=Value
  , color color=Color
  }
\renewcommand{\theFancyVerbLine}{\footnotesize\itshape\color{gray}\arabic{FancyVerbLine}}
\let\tcbcs=\cs
\renewcommand*{\cs}[1]{\textcolor{Command}{\tcbcs{#1}}}
\def\sqbrackets#1{%
  \texttt{\textcolor{Option}{[}#1\textcolor{Option}{]}}}
\def\brackets#1{%
  \texttt{\textcolor{Environment}{\char`\{}#1\textcolor{Environment}{\char`\}}}}
\def\marg#1{%
  \textcolor{Environment}{\ttfamily\char`\{}\meta{#1}\textcolor{Environment}{\ttfamily\char`\}}}
\newcommand*{\env}[1]{\textcolor{Environment}{\ttfamily #1}}
\newcommand*{\key}[1]{\textcolor{Option}{\ttfamily #1}}
\newcommand*{\val}[1]{\textcolor{Value}{\ttfamily #1}}
\renewenvironment{macro}[1]{%
  \def\MyName{#1}%
  \index{\MyName@\tcbIndexPrintComC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed a macro environment you have not opened on \the\inputlineno.}%
  }
  \index{\MyName@\tcbIndexPrintComC {\MyName}|)}%
}
\renewenvironment{environment}[1]{%
  \def\MyName{#1}%
  \index{\MyName@\tcbIndexPrintEnvCA {\MyName}|(emph}%
  \index{Environments!\MyName@\tcbIndexPrintEnvC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an environment environment you have not opened on \the\inputlineno.}%
  }
  \index{Environments!\MyName@\tcbIndexPrintEnvC {\MyName}|)}%
  \index{\MyName@\tcbIndexPrintEnvCA {\MyName}|)}%
}
\newenvironment{optionkey}[1]{%
  \def\MyName{#1}%
  \index{\MyName@\tcbIndexPrintKeyCA {\MyName}|(emph}%
  \index{Keys!\MyName@\tcbIndexPrintKeyC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an optionkey environment you have not opened on \the\inputlineno.}%
  }
  \index{Keys!\MyName@\tcbIndexPrintKeyC {\MyName}|)}%
  \index{\MyName@\tcbIndexPrintKeyCA {\MyName}|)}%
}
\newenvironment{optionvalue}[1]{%
  \def\MyName{#1}%
  \index{\MyName@\tcbIndexPrintValCA {\MyName}|(emph}%
  \index{Values!\MyName@\tcbIndexPrintValC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an optionvalue environment you have not opened on \the\inputlineno.}%
  }
  \index{Values!\MyName@\tcbIndexPrintValC {\MyName}|)}%
  \index{\MyName@\tcbIndexPrintValCA {\MyName}|)}%
}
\makeatletter
\newcommand{\resetmintedformat}{%
  % Comments
  \expandafter\def\csname PYGdefault@tok@c\endcsname{\let\PYGdefault@it=\textit\def\PYGdefault@tc####1{\textcolor{gray}{####1}}}
  % Command sequences
  \expandafter\def\csname PYGdefault@tok@k\endcsname{\def\PYGdefault@tc####1{\textcolor{Command}{####1}}}
  % Optional arguments
  \expandafter\def\csname PYGdefault@tok@na\endcsname{\def\PYGdefault@tc####1{\textcolor{Option}{####1}}}
  % Braces
  \expandafter\def\csname PYGdefault@tok@nb\endcsname{\def\PYGdefault@tc####1{\textcolor{Environment}{####1}}}
}
\apptocmd{\minted@checkstyle}{\resetmintedformat}{}{}
\makeatother
\newcommand{\pkg}[1]{\href{http://www.ctan.org/pkg/#1}{\textsf{#1}}}
\MakeShortVerb{\|}
\makeatletter
\let\PrintMacroName\@gobble
\let\PrintEnvName\@gobble
\renewenvironment{tcb@manual@entry}{\begin{list}{}{%
  \setlength{\topsep}{0pt}
  \setlength{\partopsep}{0pt}
  \setlength{\leftmargin}{\kvtcb@doc@left}%
  \setlength{\itemindent}{0pt}%
  \setlength{\itemsep}{0pt}%
  \setlength{\parsep}{0pt}%
  \setlength{\rightmargin}{\kvtcb@doc@right}%
  }\item}{\end{list}}
\makeatother
% This bit inspired by ydoc
\makeatletter
\newwrite\ydocwrite
\def\ydocfname{\jobname.tcbtemp}
\def\ydoc@catcodes{%
  \let\do\@makeother
  \dospecials
  \catcode`\\=\active
  \catcode`\^^M=\active
  \catcode`\ =\active
}
\def\macrocode{%
  \begingroup
  \ydoc@catcodes
  \macro@code
}
\def\endmacrocode{}
\begingroup
\endlinechar\m@ne
\@firstofone{%
\catcode`\|=0\relax
\catcode`\(=1\relax
\catcode`\)=2\relax
\catcode`\*=14\relax
\catcode`\{=12\relax
\catcode`\}=12\relax
\catcode`\ =12\relax
\catcode`\%=12\relax
\catcode`\\=\active
\catcode`\^^M=\active
\catcode`\ =\active
}*
|gdef|macro@code#1^^M%    \end{macrocode}(*
|endgroup|expandafter|macro@@code|expandafter(|ydoc@removeline#1|noexpand|lastlinemacro)*
)*
|gdef|ydoc@removeline#1^^M(|noexpand|firstlinemacro)*
|gdef|ydoc@defspecialmacros(*
|def^^M(|noexpand|newlinemacro)*
|def (|noexpand|spacemacro)*
|def\(|noexpand|bslashmacro)*
)*
|gdef|ydoc@defrevspecialmacros(*
|def|newlinemacro(|noexpand^^M)*
|def|spacemacro(|noexpand )*
|def|bslashmacro(|noexpand\)*
)*
|endgroup
\def\macro@@code#1{%
  {\ydoc@defspecialmacros
  \xdef\themacrocode{#1}}%
  \PrintMacroCode
  \end{macrocode}%
}
\def\PrintMacroCode{%
  \begingroup
  \let\firstlinemacro\empty
  \let\lastlinemacro\empty
  \def\newlinemacro{^^J}%
  \let\bslashmacro\bslash
  \let\spacemacro\space
  \immediate\openout\ydocwrite=\ydocfname\relax
  \immediate\write\ydocwrite{\themacrocode}%
  \immediate\closeout\ydocwrite
  \let\input\@input
  \tcbinputlisting{breakable,listing only,docexample,listing file=\ydocfname}%
  \endgroup
}
\makeatother

\DisableCrossrefs
\makeindex
%\CodelineIndex
\RecordChanges
\begin{document}

\GetFileInfo{\jobname.dtx}
\DoNotIndex{\documentclass,\newcommand,\newenvironment}

\title{\textsf{beamerticle} --- Convenient mode selection in Beamer documents}
\author{Alex Ball}
\date{Class \fileversion\ --- \filedate}

\maketitle

\begin{abstract}\noindent
This class is a wrapper around the \pkg{beamer} class to make it easier to use the
same document to generate the different forms of the presentation: the slides
themselves, an abbreviated slide set for transparencies or online reference,
an n-up handout version, but most significantly a transcript or set of notes
using the \pkg{article} class.

To contact the author about this package, please visit the GitHub
page where the code is hosted: \url{https://github.com/alex-ball/beamerticle}.
\end{abstract}

\section{Introduction}

With \pkg{beamer}, it is possible to typeset the same document code in different
ways to get different effects. The result you get depends on a potentially
confusing mix of options, modes, and indeed classes.

Beamer has five modes for typesetting content. There are three modes that
produce regular slides:

\begin{itemize}
\item
  The \key{beamer} mode relates to the normal, default slide set.
\item
  The \key{trans} class option switches to the mode of the same name. It is
  intended for transparencies, but is really just an alternative mode that
  ignores `bare' overlay specifications.
\item
  The \key{handout} class option switches to the mode of the same name. It is
  intended for print-friendly versions, but is really just another alternative
  mode that ignores `bare' overlay specifications.
\end{itemize}

The \pkg{beamer} manual shows how to use \key{handout} mode in conjunction
with \pkg{pgfpages} to get several slides on a single side of A4 (or Letter)
paper.

Beamer can also produce a double-height or double-width slide set, with the
intention that each half will be shown on a different display (e.g. one for
the audience, one for the speaker). There are three variations of this,
activated using \cs{setbeameroption}:

\begin{itemize}
\item
  \key{show notes on second screen} uses the second screen for text marked up
  using \cs{note}\marg{text}.
\item
  \key{second mode text on second screen} uses the second screen for showing
  the slide typeset in \key{second} mode rather than \key{beamer}. Unlike
  \key{trans} and \key{handout}, \key{second} responds to `bare' overlay
  specifications.
\item
  \key{previous slide on second screen}, uses the second screen either for
  showing the previous slide or, if the slide has the \key{typeset second}
  option set, for showing the current slide typeset in \key{second} mode.
\end{itemize}

The final variation is to use a different class altogether, such as
\pkg{article}, in conjunction with \pkg{beamerarticle}. In this case the content
is set free-flowing in \key{article} mode, without any of the frame furniture.

The \pkg{beamer} manual suggests coping with all these variations by having the
document code in one file, and using it as input to other files that each set up
a different mode of operation. This is fine but a bit of a fiddle. Could it be
possible to get slides, an article and a handout all from a single run of, say,
\pkg{latexmk}?

This class is intended as a wrapper around these various options, to simplify
the matter of switching between them in a single document. More specifically, it
has three main functions:

\begin{enumerate}
\item
  To make it easier, within the same document, to switch between using the
  \pkg{beamer} class and the \pkg{article} class with the
  \pkg{beamerarticle} package. This includes adding more of what
  \pkg{beamer} does to the \pkg{article} class than does the 
  \pkg{beamerarticle} package.
\item
  To offer more choice of handout-mode layouts than the \pkg{beamer} manual
  gives you, and to make them easier to select.
\item
  To allow you to override the \pkg{beamer} mode from the command line, by
  choosing a given jobname suffix. Primarily this is to allow you to generate
  the different versions programmatically. Indeed, the class provides facilities
  for generating multiple versions with a single command.
\end{enumerate}

\section{Usage}

\subsection{Loading the class}

The class is loaded in the usual way:

\begin{tcolorbox}[docexample,fontupper=\small]
\cs{documentclass}\oarg{options}\brackets{beamerticle}
\end{tcolorbox}

The following options are recognised:

\begin{docKey}{handout}{}{default \val{6}, initially unset}
  Not implemented yet.
\end{docKey}

\subsection{Preamble}

TBC

\subsection{Body}

TBC

\begin{dispListing}
  \newcommand{\ArticleSuffix}{-script}
\end{dispListing}

\StopEventually{^^A
  \PrintChanges
  \printindex
}

\section{Implementation}

\setcounter{FancyVerbLine}{18}%
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% \iffalse
%<*class>
% \fi
%
% \subsection{Dependencies}
%
% We use the following packages:
% \begin{itemize}
% \item
%   \pkg{xkeyval} for setting options
% \item
%   \pkg{etoolbox} for command patches and list processing
% \item
%   \pkg{xstring} for comparisons
% \item
%   \pkg{shellesc} for running extra modes
% \item
%   \pkg{iftex} for determining which engine to use
% \end{itemize}
%
%    \begin{macrocode}
\RequirePackage{xkeyval,xkvltxp,etoolbox,xstring,shellesc,iftex}
%    \end{macrocode}
%
% \subsection{Options}
%
% We recognize four main modes of operation: `beamer', `trans', `handout' (with
% a given number of slides per page) and `article'.
%
% \begin{optionkey}{beamer}
% The \key{beamer} option triggers beamer mode.
%
%    \begin{macrocode}
\define@boolkey{beamerticle}{beamer}[true]{%
  \ifKV@beamerticle@beamer
    \setkeys{beamerticle}{trans=false}
    \setkeys{beamerticle}{handout=false}
    \setkeys{beamerticle}{article=false}
  \fi
}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{trans}
% The \key{trans} option triggers trans mode.
%
%    \begin{macrocode}
\define@boolkey{beamerticle}{trans}[true]{%
  \ifKV@beamerticle@trans
    \setkeys{beamerticle}{beamer=false}
    \setkeys{beamerticle}{handout=false}
    \setkeys{beamerticle}{article=false}
  \fi
}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{handout}
%   \begin{optionkey}{nup}
% The \key{handout} option triggers handout mode, while the \key{nup} option
% specifies how many slides to include per page.
%
%    \begin{macrocode}
\define@boolkey{beamerticle}{handout}[true]{%
  \ifKV@beamerticle@handout
    \setkeys{beamerticle}{beamer=false}
    \setkeys{beamerticle}{trans=false}
    \setkeys{beamerticle}{article=false}
  \fi
}
\define@choicekey+{beamerticle}{nup}{2, 3, 4, 6}[6]{%
  \def\beamerticle@nup{#1}%
}{%
  \ClassWarning{beamerticle}{Value of `nup' not recognized.
    Allowed values are 2, 3, 4, and 6.}%
}
%    \end{macrocode}
%   \end{optionkey}
% \end{optionkey}
%
% \begin{optionkey}{article}
% The \key{article} option triggers article mode.
%
%    \begin{macrocode}
\define@boolkey{beamerticle}{article}[true]{%
  \ifKV@beamerticle@article
    \setkeys{beamerticle}{beamer=false}
    \setkeys{beamerticle}{trans=false}
    \setkeys{beamerticle}{handout=false}
  \fi
}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{also}
% \begin{optionkey}{alsobeamer}
% \begin{optionkey}{alsotrans}
% \begin{optionkey}{alsohandout}
% \begin{optionkey}{alsoarticle}
% \begin{macro}{forssvlist}
% \begin{macro}{beamerticle@SetAlso}
% The \key{also} option allows the user to specify a set of alternative modes
% to typeset in parallel, in a space separated list. Alternatively, the user
% can specify the Boolean \key{also*} options directly.
%
%    \begin{macrocode}
\define@boolkey{beamerticle}{alsobeamer}[true]{}
\define@boolkey{beamerticle}{alsotrans}[true]{}
\define@boolkey{beamerticle}{alsohandout}[true]{}
\define@boolkey{beamerticle}{alsoarticle}[true]{}
\newcommand{\beamerticle@SetAlso}[1]{%
  \key@ifundefined{beamerticle}{also#1}{%
    \ClassWarning{beamerticle}{`#1' is not a valid value for option `also'}%
  }{%
    \setkeys{beamerticle}{also#1}%
  }%
}
\define@key{beamerticle}{also}{%
  \forcsvlist{\beamerticle@SetAlso}{#1}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{optionkey}
% \end{optionkey}
% \end{optionkey}
% \end{optionkey}
% \end{optionkey}
%
% We also offer some convenvience options to help with formatting the output.
%
% \begin{optionkey}{articleframetitles}
% We offer some alternatives for handling frame titles in article mode.
% \begin{itemize}
% \item
%   \val{inline} is what \pkg{beamerarticle} normally does.
%   \val{margin} puts the frame titles in the margin.
%   \val{none} gets rid of them entirely.
% \end{itemize}
%
%    \begin{macrocode}
\define@choicekey+{beamerticle}{articleframetitles}{inline, margin, none}[inline]{%
  \def\beamerticle@articleframetitles{#1}%
}{%
  \ClassWarning{beamerticle}{Value of `articleframetitles' not recognized.
    Allowed values are inline, margin, and none.}%
}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{handoutpaper}
% In theory it would be nice to anticipate the paper size that the article mode
% would use, and pass that as an option to \cs{pgfpagesuselayout} but as that's
% unlikely to be clean code, we settle here for setting it with an option.
%
%    \begin{macrocode}
\define@key{beamerticle}{handoutpaper}[a4paper]{%
  \def\beamerticle@handoutpaper{#1}%
}
%    \end{macrocode}
% \end{optionkey}
%
% The default behaviour is to use beamer mode only.
% As for the other options, the defaults are to hide frame titles in article
% mode and use A4 paper for handouts.
%
%    \begin{macrocode}
\setkeys{beamerticle}{beamer=true,nup,alsobeamer=false,alsotrans=false,%
  alsohandout=false,alsoarticle=false}
\setkeys{beamerticle}{articleframetitles=none,handoutpaper}
%    \end{macrocode}
%
% Now we process the options given by the user.
%
%    \begin{macrocode}
\ProcessOptionsX<beamerticle>
%    \end{macrocode}
%
% \subsection{Jobname-based mode switching}
%
% \begin{macro}{BeamerSuffix}
% \begin{macro}{TransSuffix}
% \begin{macro}{HandoutSuffix}
% \begin{macro}{ArticleSuffix}
% We define some default values for the special suffixes.
%
%    \begin{macrocode}
\providecommand*{\BeamerSuffix}{-slides}
\providecommand*{\TransSuffix}{-trans}
\providecommand*{\HandoutSuffix}{-handout}
\providecommand*{\ArticleSuffix}{-article}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{BeamerticleSpawn}
% We provide a special routine for spawning new \LaTeX\ processes. We allow
% for the possibility of the user overriding this routine with another one,
% perhaps using a different automation tool.
%
%    \begin{macrocode}
\providecommand{\BeamerticleSpawn}[1]{%
  \ifbool{PDFTeX}{%
    \ShellEscape{latexmk -silent -pdf -synctex=1 -interaction=batchmode -jobname=\jobname#1 \jobname}
  }{%
    \ifbool{LuaTeX}{%
      \ShellEscape{latexmk -silent -lualatex -synctex=1 -interaction=batchmode -jobname=\jobname#1 \jobname}
    }{%
      \ifbool{XeTeX}{%
        \ShellEscape{latexmk -silent -xelatex -synctex=1 -interaction=batchmode -jobname=\jobname#1 \jobname}
      }{%
        \ShellEscape{latexmk -silent -synctex=1 -interaction=batchmode -jobname=\jobname#1 \jobname}
      }%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% We check for special jobnames and use them to override the above mode-related
% options
%
%    \begin{macrocode}
\IfEndWith*{\jobname}{\BeamerSuffix}{%
  \setkeys{beamerticle}{beamer=true}
}{%
  \IfEndWith*{\jobname}{\TransSuffix}{%
    \setkeys{beamerticle}{trans=true}
  }{%
    \IfEndWith*{\jobname}{\HandoutSuffix}{%
      \setkeys{beamerticle}{handout=true}
    }{%
      \IfEndWith*{\jobname}{\ArticleSuffix}{%
        \setkeys{beamerticle}{article=true}
      }{%
        \ifbool{KV@beamerticle@alsobeamer}{%
          \BeamerticleSpawn{\BeamerSuffix}%
        }{}
        \ifbool{KV@beamerticle@alsotrans}{%
          \BeamerticleSpawn{\TransSuffix}%
        }{}
        \ifbool{KV@beamerticle@alsohandout}{%
          \BeamerticleSpawn{\HandoutSuffix}%
        }{}
        \ifbool{KV@beamerticle@alsoarticle}{%
          \BeamerticleSpawn{\ArticleSuffix}%
        }{}
      }%
    }%
  }%
}%
%    \end{macrocode}
%
% \subsection{Setting up modes}
%
% For article mode, we load the \pkg{article} class and the \pkg{beamerarticle}
% support package. Apologies for anyone hoping for \pkg{scrartcle} or
% \pkg{memoir} alternatives.
%
%    \begin{macrocode}
\ifbool{KV@beamerticle@article}{%
  \LoadClass{article}
  \RequirePackage{beamerarticle}
%    \end{macrocode}
%
% Personally I find slide titles somewhat intrusive in article mode. They can
% easily end up duplicating section headings in running text, or captions in
% figures. You may have other ideas, so we keep this behaviour configurable.
%
%    \begin{macrocode}
  \ifcsstring{beamerticle@articleframetitles}{margin}{%
    \renewcommand{\frametitle}[1]{\marginpar{#1}}%
    \renewcommand{\framesubtitle}[1]{\marginpar{\emshape #1}}%
  }{%
    \ifcsstring{beamerticle@articleframetitles}{none}{%
      \renewcommand{\frametitle}[1]{}%
      \renewcommand{\framesubtitle}[1]{}%
    }{}%
  }
%    \end{macrocode}
%
% While \pkg{beamer} takes care of adding presentation metadata to the PDF
% properties, \pkg{beamerarticle} misses the title and author properties. (It
% does manage to set the subject and keywords, though.) We achieve parity with
% some additional \cs{hypersetup}. Note that \pkg{beamerarticle} appends the
% subtitle to \cs{@title} with a linebreak; we adjust this so that a colon is
% used instead.
%
%    \begin{macrocode}
  \renewcommand{\subtitle}[2][]{\def\insertsubtitle{#2}\g@addto@macro\@title{: #2}}
  \AtBeginDocument{
    \begingroup
    \hypersetup{pdftitle={\@title}}%
    \def\and{\unskip, }%
    \let\thanks=\@gobble
    \let\inst=\@gobble
    \hypersetup{pdfauthor={\@author}}%
    \endgroup
  }
%    \end{macrocode}
%
% We adjust \cs{maketitle} to shave off a little vertical space from the top,
% and add in a line for the \cs{institute}.
%
%    \begin{macrocode}
  \ifundef{\beamer@originstitute}{%
    \renewcommand{\institute}[2][]{\def\insertinstitute{#2}}%
  }{%
    \renewcommand{\institute}[2][]{\def\insertinstitute{#2}\beamer@originstitute{#2}}%
  }%
  \def\@maketitle{%
    \newpage
    \null
    \begin{center}%
      \let\footnote\thanks
      {\LARGE \@title \par}%
      \vskip 1.5em%
      {%
        \large\lineskip .5em%
        \begin{tabular}[t]{c}%
          \ifundef{\insertauthorurl}{\@author}{\href{\insertauthorurl}{\@author}}%
        \end{tabular}\par
      }%
      \ifdefvoid{\insertinstitute}{}{%
        {%
          \normalsize\lineskip .5em%
          \begin{tabular}[t]{c}%
            \insertinstitute
          \end{tabular}%
        }%
      }%
      \par\vskip 1em%
      {\large \@date \par}%
    \end{center}%
    \par\vskip 1.5em%
  }
%    \end{macrocode}
%
% It seems as though \pkg{beamerarticle} expects \pkg{hyperref} to be loaded,
% but doesn't actually do it itself. So we oblige, using the default options
  % specified by \pkg{beamer}.
%
%    \begin{macrocode}
  \RequirePackage[bookmarks=true,%
    bookmarksopen=true,%
    pdfborder={0 0 0},%
    pdfhighlight={/N},%
    linkbordercolor={.5 .5 .5}]{hyperref}
 }{%
%    \end{macrocode}
%
% For the presentation modes, we load the \pkg{beamer} class with appropriate
% options. Since we are targeting users wanting different versions of their
% presentations with the same code, we activate \key{ignorenonframetext}.
%
%    \begin{macrocode}
  \ifbool{KV@beamerticle@handout}{%
    \LoadClass[ignorenonframetext,handout]{beamer}
%    \end{macrocode}
%
% Handout mode lays multiple slides out on a single page, as set by the
    % \key{nup} option. For this we use \pkg{pgfpages} and \pkg{pgf}.
%
%    \begin{macrocode}
    \RequirePackage{pgfpages,pgf}
%    \end{macrocode}
%
% The 2-up layout is just like the normal \key{2 on 1} layout, except it shows
% the slide borders.
%
%    \begin{macrocode}
    \ifcsstring{beamerticle@nup}{2}{%
      \pgfpagesdeclarelayout{1 by 2}
      {
        \edef\pgfpageoptionheight{\the\paperwidth} % landscaped by default
        \edef\pgfpageoptionwidth{\the\paperheight}
        \def\pgfpageoptionborder{0pt}
        \def\pgfpageoptionfirstshipout{1}
      }
      {
        \pgfpagesphysicalpageoptions
        {%
          logical pages=2,%
          physical height=\pgfpageoptionheight,%
          physical width=\pgfpageoptionwidth,%
          current logical shipout=\pgfpageoptionfirstshipout%
        }
        \ifdim\paperheight>\paperwidth\relax
          % put side-by-side
          \pgfpageslogicalpageoptions{1}
          {%
            border shrink=\pgfpageoptionborder,%
            border code=\pgfstroke,%
            resized width=.5\pgfphysicalwidth,%
            resized height=\pgfphysicalheight,%
            center=\pgfpoint{.25\pgfphysicalwidth}{.5\pgfphysicalheight}%
          }%
          \pgfpageslogicalpageoptions{2}
          {%
            border shrink=\pgfpageoptionborder,%
            border code=\pgfstroke,%
            resized width=.5\pgfphysicalwidth,%
            resized height=\pgfphysicalheight,%
            center=\pgfpoint{.75\pgfphysicalwidth}{.5\pgfphysicalheight}%
          }%
        \else
          % stack on top of one another
          \pgfpageslogicalpageoptions{1}
          {%
            border shrink=\pgfpageoptionborder,%
            border code=\pgfstroke,%
            resized width=\pgfphysicalwidth,%
            resized height=.5\pgfphysicalheight,%
            center=\pgfpoint{.5\pgfphysicalwidth}{.75\pgfphysicalheight}%
          }%
          \pgfpageslogicalpageoptions{2}
          {%
            border shrink=\pgfpageoptionborder,%
            border code=\pgfstroke,%
            resized width=\pgfphysicalwidth,%
            resized height=.5\pgfphysicalheight,%
            center=\pgfpoint{.5\pgfphysicalwidth}{.25\pgfphysicalheight}%
          }%
        \fi
      }
      \pgfpagesuselayout{1 by 2}[\beamerticle@handoutpaper,border shrink=5mm]
    }{%
%    \end{macrocode}
%
% The \val{3} option sets 3 slides down the left of the page, leaving the right
% side blank.
%
%    \begin{macrocode}
      \ifcsstring{beamerticle@nup}{3}{%
        \pgfpagesdeclarelayout{1 by 3}
        {
          \edef\pgfpageoptionheight{\the\paperwidth} % landscaped by default
          \edef\pgfpageoptionwidth{\the\paperheight}
          \def\pgfpageoptionborder{0pt}
          \def\pgfpageoptionfirstshipout{1}
        }
        {
          \pgfpagesphysicalpageoptions
          {%
            logical pages=3,%
            physical height=\pgfpageoptionheight,%
            physical width=\pgfpageoptionwidth,%
            current logical shipout=\pgfpageoptionfirstshipout%
          }
          \ifdim\paperheight>\paperwidth\relax
            % put side-by-side
            \pgfpageslogicalpageoptions{1}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.333\pgfphysicalwidth,%
              resized height=.5\pgfphysicalheight,%
              center=\pgfpoint{.167\pgfphysicalwidth}{.75\pgfphysicalheight}%
            }%
            \pgfpageslogicalpageoptions{2}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.333\pgfphysicalwidth,%
              resized height=.5\pgfphysicalheight,%
              center=\pgfpoint{.5\pgfphysicalwidth}{.75\pgfphysicalheight}%
            }%
            \pgfpageslogicalpageoptions{3}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.333\pgfphysicalwidth,%
              resized height=.5\pgfphysicalheight,%
              center=\pgfpoint{.833\pgfphysicalwidth}{.75\pgfphysicalheight}%
            }%
          \else
            % stack on top of one another
            \pgfpageslogicalpageoptions{1}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.5\pgfphysicalwidth,%
              resized height=.333\pgfphysicalheight,%
              center=\pgfpoint{.25\pgfphysicalwidth}{.833\pgfphysicalheight}%
            }%
            \pgfpageslogicalpageoptions{2}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.5\pgfphysicalwidth,%
              resized height=.333\pgfphysicalheight,%
              center=\pgfpoint{.25\pgfphysicalwidth}{.5\pgfphysicalheight}%
            }%
            \pgfpageslogicalpageoptions{3}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.5\pgfphysicalwidth,%
              resized height=.333\pgfphysicalheight,%
              center=\pgfpoint{.25\pgfphysicalwidth}{.167\pgfphysicalheight}%
            }%
          \fi
        }
        \pgfpagesuselayout{1 by 3}[\beamerticle@handoutpaper,border shrink=5mm]
      }{%
%    \end{macrocode}
%
% The \val{4} option sets 6 slides on the page, arranged as a sequence of rows
% (as opposed to a sequence of columns).
%
%    \begin{macrocode}
        \ifcsstring{beamerticle@nup}{4}{%
          \pgfpagesdeclarelayout{2 by 2}
          {
            \edef\pgfpageoptionheight{\the\paperheight} 
            \edef\pgfpageoptionwidth{\the\paperwidth}
            \edef\pgfpageoptionborder{0pt}
          }
          {
            \pgfpagesphysicalpageoptions
            {%
              logical pages=4,%
              physical height=\pgfpageoptionheight,%
              physical width=\pgfpageoptionwidth%
            }
            \pgfpageslogicalpageoptions{1}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.5\pgfphysicalwidth,%
              resized height=.5\pgfphysicalheight,%
              center=\pgfpoint{.25\pgfphysicalwidth}{.75\pgfphysicalheight}%
            }%
            \pgfpageslogicalpageoptions{2}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.5\pgfphysicalwidth,%
              resized height=.5\pgfphysicalheight,%
              center=\pgfpoint{.75\pgfphysicalwidth}{.75\pgfphysicalheight}%
            }%
            \pgfpageslogicalpageoptions{3}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.5\pgfphysicalwidth,%
              resized height=.5\pgfphysicalheight,%
              center=\pgfpoint{.25\pgfphysicalwidth}{.25\pgfphysicalheight}%
            }%
            \pgfpageslogicalpageoptions{4}
            {%
              border shrink=\pgfpageoptionborder,%
              border code=\pgfstroke,%
              resized width=.5\pgfphysicalwidth,%
              resized height=.5\pgfphysicalheight,%
              center=\pgfpoint{.75\pgfphysicalwidth}{.25\pgfphysicalheight}%
            }%
          }
          \pgfpagesuselayout{2 by 2}[\beamerticle@handoutpaper,landscape,border shrink=5mm]
        }{%
%    \end{macrocode}
%
% The \val{6} option sets 6 slides on the page, arranged as a sequence of rows
% (as opposed to a sequence of columns).
%
%    \begin{macrocode}
          \ifcsstring{beamerticle@nup}{6}{%
            \pgfpagesdeclarelayout{2 by 3}
            {
              \edef\pgfpageoptionheight{\the\paperwidth} % landscaped by default
              \edef\pgfpageoptionwidth{\the\paperheight}
              \def\pgfpageoptionborder{0pt}
              \def\pgfpageoptionfirstshipout{1}
            }
            {
              \pgfpagesphysicalpageoptions
              {%
                logical pages=6,%
                physical height=\pgfpageoptionheight,%
                physical width=\pgfpageoptionwidth,%
                current logical shipout=\pgfpageoptionfirstshipout%
              }
              \ifdim\paperheight>\paperwidth\relax
                % put side-by-side
                \pgfpageslogicalpageoptions{1}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.333\pgfphysicalwidth,%
                  resized height=.5\pgfphysicalheight,%
                  center=\pgfpoint{.167\pgfphysicalwidth}{.75\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{2}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.333\pgfphysicalwidth,%
                  resized height=.5\pgfphysicalheight,%
                  center=\pgfpoint{.5\pgfphysicalwidth}{.75\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{3}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.333\pgfphysicalwidth,%
                  resized height=.5\pgfphysicalheight,%
                  center=\pgfpoint{.833\pgfphysicalwidth}{.75\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{4}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.333\pgfphysicalwidth,%
                  resized height=.5\pgfphysicalheight,%
                  center=\pgfpoint{.167\pgfphysicalwidth}{.25\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{5}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.333\pgfphysicalwidth,%
                  resized height=.5\pgfphysicalheight,%
                  center=\pgfpoint{.5\pgfphysicalwidth}{.25\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{6}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.333\pgfphysicalwidth,%
                  resized height=.5\pgfphysicalheight,%
                  center=\pgfpoint{.833\pgfphysicalwidth}{.25\pgfphysicalheight}%
                }%
              \else
                % stack on top of one another
                \pgfpageslogicalpageoptions{1}
                {%
                  border shrink=\pgfpageoptionborder,%
                  resized width=.5\pgfphysicalwidth,%
                  resized height=.333\pgfphysicalheight,%
                  center=\pgfpoint{.25\pgfphysicalwidth}{.833\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{2}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.5\pgfphysicalwidth,%
                  resized height=.333\pgfphysicalheight,%
                  center=\pgfpoint{.75\pgfphysicalwidth}{.833\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{3}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.5\pgfphysicalwidth,%
                  resized height=.333\pgfphysicalheight,%
                  center=\pgfpoint{.25\pgfphysicalwidth}{.5\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{4}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.5\pgfphysicalwidth,%
                  resized height=.333\pgfphysicalheight,%
                  center=\pgfpoint{.75\pgfphysicalwidth}{.5\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{5}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.5\pgfphysicalwidth,%
                  resized height=.333\pgfphysicalheight,%
                  center=\pgfpoint{.25\pgfphysicalwidth}{.167\pgfphysicalheight}%
                }%
                \pgfpageslogicalpageoptions{6}
                {%
                  border shrink=\pgfpageoptionborder,%
                  border code=\pgfstroke,%
                  resized width=.5\pgfphysicalwidth,%
                  resized height=.333\pgfphysicalheight,%
                  center=\pgfpoint{.75\pgfphysicalwidth}{.167\pgfphysicalheight}%
                }%
              \fi
            }
            \pgfpagesuselayout{2 by 3}[\beamerticle@handoutpaper,border shrink=5mm]
          }{}%
        }%
      }%
    }%
%    \end{macrocode}
%
% The other modes are much simpler to handle.
%
%    \begin{macrocode}
  }{%
    \ifbool{KV@beamerticle@trans}{%
      \LoadClass[ignorenonframetext,trans]{beamer}
    }{%
      \LoadClass[ignorenonframetext]{beamer}
    }%
  }
}
%    \end{macrocode}
%
% \subsection{General fixes}
%
% It looks odd to have the \cs{inst} markers from \pkg{beamer} in the maths
% font, so we replace those definitions with something more in keeping.
%
%    \begin{macrocode}
\def\beamer@insttitle#1{\textsuperscript{#1}}
\def\beamer@instinst#1{\textsuperscript{#1}\ignorespaces}
%    \end{macrocode}
%
% There is no more.
%
%    \begin{macrocode}
\endinput
%    \end{macrocode}
% \iffalse
%</class>
% \fi
%\Finale
